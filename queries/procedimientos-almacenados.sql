
USE gctelecomdb
GO

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA FUENTE

-- SP_OBTENER_FUENTES
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_FUENTES') 
	DROP PROCEDURE SP_OBTENER_FUENTES
GO
CREATE PROC	SP_OBTENER_FUENTES
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM fuente WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_FUENTES 1
GO

-- SP_CREAR_FUENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_FUENTE') 
	DROP PROCEDURE SP_CREAR_FUENTE  
GO
CREATE PROC	SP_CREAR_FUENTE
	@nombre VARCHAR(100)
AS
BEGIN
	BEGIN TRAN SP_CREAR_FUENTE
	BEGIN TRY
		INSERT INTO fuente(nombre)
		VALUES(@nombre)
		COMMIT TRAN SP_CREAR_FUENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_FUENTE
	END CATCH
END
GO

-- SP_ACTUALIZAR_FUENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_FUENTE') 
	DROP PROCEDURE SP_ACTUALIZAR_FUENTE  
GO
CREATE PROC	SP_ACTUALIZAR_FUENTE
	@fuente_id INTEGER,
	@nombre VARCHAR(100)
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_FUENTE
	BEGIN TRY
		UPDATE fuente SET nombre=@nombre
		WHERE fuente_id=@fuente_id
		COMMIT TRAN SP_ACTUALIZAR_FUENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_FUENTE
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_FUENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_FUENTE') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_FUENTE  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_FUENTE
	@fuente_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_FUENTE
	BEGIN TRY
		UPDATE fuente SET es_visible=@es_visible WHERE fuente_id=@fuente_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_FUENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_FUENTE
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_FUENTE_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_FUENTE_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_FUENTE_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_FUENTE_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(fuente_id), 0) + 1
    FROM fuente;

    SELECT @siguiente_id AS siguiente_fuente_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_FUENTE_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA FUENTE

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA CLIENTE

-- SP_OBTENER_CLIENTES
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_CLIENTES') 
	DROP PROCEDURE SP_OBTENER_CLIENTES
GO
CREATE PROC	SP_OBTENER_CLIENTES
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM cliente WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_CLIENTES
GO

-- SP_CREAR_CLIENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_CLIENTE') 
	DROP PROCEDURE SP_CREAR_CLIENTE  
GO
CREATE PROC	SP_CREAR_CLIENTE
	@fuente_id INTEGER,
	@nombre VARCHAR(100),
	@correo VARCHAR(100),
	@celular VARCHAR(9),
	@direccion TEXT
AS
BEGIN
	BEGIN TRAN SP_CREAR_CLIENTE
	BEGIN TRY
		INSERT INTO cliente(fuente_id, nombre, correo, celular, direccion)
		VALUES(@fuente_id, @nombre, @correo, @celular, @direccion)
		COMMIT TRAN SP_CREAR_CLIENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_CLIENTE
	END CATCH
END
GO

-- SP_ACTUALIZAR_CLIENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_CLIENTE') 
	DROP PROCEDURE SP_ACTUALIZAR_CLIENTE  
GO
CREATE PROC	SP_ACTUALIZAR_CLIENTE
	@cliente_id INTEGER,
	@fuente_id INTEGER,
	@nombre VARCHAR(100),
	@correo VARCHAR(100),
	@celular VARCHAR(9),
	@direccion TEXT
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_CLIENTE
	BEGIN TRY
		UPDATE cliente SET
			fuente_id=@fuente_id,
			nombre=@nombre,
			correo=@correo,
			celular=@celular,
			direccion=@direccion
		WHERE cliente_id=@cliente_id
		COMMIT TRAN SP_ACTUALIZAR_CLIENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_CLIENTE
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_CLIENTE
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_CLIENTE') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_CLIENTE  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_CLIENTE
	@cliente_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_CLIENTE
	BEGIN TRY
		UPDATE cliente SET es_visible=@es_visible WHERE cliente_id=@cliente_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_CLIENTE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_CLIENTE
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_CLIENTE_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_CLIENTE_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_CLIENTE_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_CLIENTE_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(cliente_id), 0) + 1
    FROM cliente;

    SELECT @siguiente_id AS siguiente_cliente_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_CLIENTE_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA CLIENTE

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA VENDEDOR

-- SP_OBTENER_VENDEDORES
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_VENDEDORES') 
	DROP PROCEDURE SP_OBTENER_VENDEDORES
GO
CREATE PROC	SP_OBTENER_VENDEDORES
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM vendedor WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_VENDEDORES
GO

-- SP_CREAR_VENDEDOR
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_VENDEDOR') 
	DROP PROCEDURE SP_CREAR_VENDEDOR  
GO
CREATE PROC	SP_CREAR_VENDEDOR
	@nombre VARCHAR(100),
	@correo VARCHAR(100),
	@celular VARCHAR(9),
	@direccion TEXT
AS
BEGIN
	BEGIN TRAN SP_CREAR_VENDEDOR
	BEGIN TRY
		INSERT INTO vendedor(nombre, correo, celular, direccion)
		VALUES(@nombre, @correo, @celular, @direccion)
		COMMIT TRAN SP_CREAR_VENDEDOR
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_VENDEDOR
	END CATCH
END
GO

-- SP_ACTUALIZAR_VENDEDOR
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_VENDEDOR') 
	DROP PROCEDURE SP_ACTUALIZAR_VENDEDOR  
GO
CREATE PROC	SP_ACTUALIZAR_VENDEDOR
	@vendedor_id INTEGER,
	@nombre VARCHAR(100),
	@correo VARCHAR(100),
	@celular VARCHAR(9),
	@direccion TEXT
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_VENDEDOR
	BEGIN TRY
		UPDATE vendedor SET
			nombre=@nombre,
			correo=@correo,
			celular=@celular,
			direccion=@direccion
		WHERE vendedor_id=@vendedor_id
		COMMIT TRAN SP_ACTUALIZAR_VENDEDOR
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_VENDEDOR
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_VENDEDOR
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_VENDEDOR') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_VENDEDOR  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_VENDEDOR
	@vendedor_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_VENDEDOR
	BEGIN TRY
		UPDATE vendedor SET es_visible=@es_visible WHERE vendedor_id=@vendedor_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_VENDEDOR
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_VENDEDOR
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_VENDEDOR_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_VENDEDOR_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_VENDEDOR_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_VENDEDOR_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(vendedor_id), 0) + 1
    FROM vendedor;

    SELECT @siguiente_id AS siguiente_vendedor_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_VENDEDOR_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA VENDEDOR

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA PRODUCTO

-- SP_OBTENER_PRODUCTOS
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_PRODUCTOS') 
	DROP PROCEDURE SP_OBTENER_PRODUCTOS
GO
CREATE PROC	SP_OBTENER_PRODUCTOS
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM producto WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_PRODUCTOS
GO

-- SP_CREAR_PRODUCTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_PRODUCTO') 
	DROP PROCEDURE SP_CREAR_PRODUCTO  
GO
CREATE PROC	SP_CREAR_PRODUCTO
	@nombre VARCHAR(100),
	@descripcion TEXT,
	@precio DECIMAL
AS
BEGIN
	BEGIN TRAN SP_CREAR_PRODUCTO
	BEGIN TRY
		INSERT INTO producto(nombre, descripcion, precio)
		VALUES(@nombre, @descripcion, @precio)
		COMMIT TRAN SP_CREAR_PRODUCTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_PRODUCTO
	END CATCH
END
GO

-- SP_ACTUALIZAR_PRODUCTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_PRODUCTO') 
	DROP PROCEDURE SP_ACTUALIZAR_PRODUCTO  
GO
CREATE PROC	SP_ACTUALIZAR_PRODUCTO
	@producto_id INTEGER,
	@nombre VARCHAR(100),
	@descripcion TEXT,
	@precio DECIMAL
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_PRODUCTO
	BEGIN TRY
		UPDATE producto SET
			nombre=@nombre,
			descripcion=@descripcion,
			precio=@precio
		WHERE producto_id=@producto_id
		COMMIT TRAN SP_ACTUALIZAR_PRODUCTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_PRODUCTO
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_PRODUCTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_PRODUCTO') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_PRODUCTO  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_PRODUCTO
	@producto_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_PRODUCTO
	BEGIN TRY
		UPDATE producto SET es_visible=@es_visible WHERE producto_id=@producto_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_PRODUCTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_PRODUCTO
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_PRODUCTO_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_PRODUCTO_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_PRODUCTO_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_PRODUCTO_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(producto_id), 0) + 1
    FROM producto;

    SELECT @siguiente_id AS siguiente_producto_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_PRODUCTO_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA PRODUCTO

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA VENTA

-- SP_OBTENER_VENTAS
/*IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_VENTAS') 
	DROP PROCEDURE SP_OBTENER_VENTAS
GO
CREATE PROC	SP_OBTENER_VENTAS
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM venta WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_VENTAS
GO

-- SP_CREAR_VENTA
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_VENTA') 
	DROP PROCEDURE SP_CREAR_VENTA
GO
CREATE PROC	SP_CREAR_VENTA
	@cliente_id INTEGER,
	@vendedor_id INTEGER,
	@fecha DATETIME,
	@total DECIMAL
AS
BEGIN
	BEGIN TRAN SP_CREAR_VENTA
	BEGIN TRY
		INSERT INTO venta(cliente_id, vendedor_id, fecha, total)
		VALUES(@cliente_id, @vendedor_id, @fecha, @total)
		COMMIT TRAN SP_CREAR_VENTA
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_VENTA
	END CATCH
END
GO

-- SP_ACTUALIZAR_VENTA
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_VENTA') 
	DROP PROCEDURE SP_ACTUALIZAR_VENTA  
GO
CREATE PROC	SP_ACTUALIZAR_VENTA
	@venta_id INTEGER,
	@cliente_id INTEGER,
	@vendedor_id INTEGER,
	@fecha DATETIME,
	@total DECIMAL
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_VENTA
	BEGIN TRY
		UPDATE venta SET
			cliente_id=@cliente_id,
			vendedor_id=@vendedor_id,
			fecha=@fecha,
			total=@total
		WHERE venta_id=@venta_id
		COMMIT TRAN SP_ACTUALIZAR_VENTA
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_VENTA
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_VENTA
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_VENTA') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_VENTA  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_VENTA
	@venta_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_VENTA
	BEGIN TRY
		UPDATE venta SET es_visible=@es_visible WHERE @venta_id=@venta_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_VENTA
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_VENTA
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_VENTA_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_VENTA_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_VENTA_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_VENTA_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(venta_id), 0) + 1
    FROM venta;

    SELECT @siguiente_id AS siguiente_venta_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_VENTA_ID
GO*/

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA VENTA

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA DETALLE_VENTA

-- SP_OBTENER_DETALLEVNTS
/*IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_DETALLEVNTS') 
	DROP PROCEDURE SP_OBTENER_DETALLEVNTS
GO
CREATE PROC	SP_OBTENER_DETALLEVNTS
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM detalle_venta WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_DETALLEVNTS
GO

-- SP_CREAR_DETALLEVNT
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_DETALLEVNT') 
	DROP PROCEDURE SP_CREAR_DETALLEVNT  
GO
CREATE PROC	SP_CREAR_DETALLEVNT
	@venta_id INTEGER,
	@producto_id INTEGER,
	@cantidad INTEGER
AS
BEGIN
	BEGIN TRAN SP_CREAR_DETALLEVNT
	BEGIN TRY
		INSERT INTO detalle_venta(venta_id, producto_id, cantidad)
		VALUES(@venta_id, @producto_id, @cantidad)
		COMMIT TRAN SP_CREAR_DETALLEVNT
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_DETALLEVNT
	END CATCH
END
GO

-- SP_ACTUALIZAR_DETALLEVNT
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_DETALLEVNT') 
	DROP PROCEDURE SP_ACTUALIZAR_DETALLEVNT  
GO
CREATE PROC	SP_ACTUALIZAR_DETALLEVNT
	@detalle_venta_id INTEGER,
	@venta_id INTEGER,
	@producto_id INTEGER,
	@cantidad INTEGER
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_DETALLEVNT
	BEGIN TRY
		UPDATE detalle_venta SET
			venta_id=@venta_id,
			@producto_id=@producto_id,
			cantidad=@cantidad
		WHERE detalle_venta_id=@detalle_venta_id
		COMMIT TRAN SP_ACTUALIZAR_DETALLEVNT
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_DETALLEVNT
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_DETALLEVNT
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_DETALLEVNT') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_DETALLEVNT  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_DETALLEVNT
	@detalle_venta_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_DETALLEVNT
	BEGIN TRY
		UPDATE detalle_venta SET es_visible=@es_visible WHERE detalle_venta_id=@detalle_venta_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_DETALLEVNT
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_DETALLEVNT
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_DETALLEVNT_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_DETALLEVNT_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_DETALLEVNT_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_DETALLEVNT_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(detalle_venta_id), 0) + 1
    FROM detalle_venta;

    SELECT @siguiente_id AS siguiente_detalle_venta_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_DETALLEVNT_ID
GO*/

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA DETALLE_VENTA

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA RECLAMO

-- SP_OBTENER_RECLAMOS
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_RECLAMOS') 
	DROP PROCEDURE SP_OBTENER_RECLAMOS
GO
CREATE PROC	SP_OBTENER_RECLAMOS
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM reclamo WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_RECLAMOS
GO

-- SP_CREAR_RECLAMO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_RECLAMO') 
	DROP PROCEDURE SP_CREAR_RECLAMO
GO
CREATE PROC	SP_CREAR_RECLAMO
	@producto_id INTEGER,
	@descripcion TEXT,
	@fecha DATETIME,
	@estado VARCHAR(20)
AS
BEGIN
	BEGIN TRAN SP_CREAR_RECLAMO
	BEGIN TRY
		INSERT INTO reclamo(producto_id, descripcion, fecha, estado)
		VALUES(@producto_id, @descripcion, @fecha, @estado)
		COMMIT TRAN SP_CREAR_RECLAMO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_RECLAMO
	END CATCH
END
GO

-- SP_ACTUALIZAR_RECLAMO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_RECLAMO') 
	DROP PROCEDURE SP_ACTUALIZAR_RECLAMO
GO
CREATE PROC	SP_ACTUALIZAR_RECLAMO
	@reclamo_id INTEGER,
	@producto_id INTEGER,
	@descripcion TEXT,
	@fecha DATETIME,
	@estado VARCHAR(20)
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_RECLAMO
	BEGIN TRY
		UPDATE reclamo SET
			producto_id=@producto_id,
			descripcion=@descripcion,
			fecha=@fecha,
			estado=@estado
		WHERE reclamo_id=@reclamo_id
		COMMIT TRAN SP_ACTUALIZAR_RECLAMO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_RECLAMO
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_RECLAMO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_RECLAMO') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_RECLAMO  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_RECLAMO
	@reclamo_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_RECLAMO
	BEGIN TRY
		UPDATE reclamo SET es_visible=@es_visible WHERE reclamo_id=@reclamo_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_RECLAMO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_RECLAMO
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_RECLAMO_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_RECLAMO_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_RECLAMO_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_RECLAMO_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(reclamo_id), 0) + 1
    FROM reclamo;

    SELECT @siguiente_id AS siguiente_reclamo_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_RECLAMO_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA RECLAMO

-- INICIO PROCEDIMIENTOS ALMACENADOS PARA TABLA EVENTO

-- SP_OBTENER_EVENTOS
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_OBTENER_EVENTOS') 
	DROP PROCEDURE SP_OBTENER_EVENTOS
GO
CREATE PROC	SP_OBTENER_EVENTOS
	@es_visible INT = NULL
AS
BEGIN
	SELECT * FROM evento WHERE (@es_visible IS NULL OR es_visible = @es_visible)
END
GO
	EXEC SP_OBTENER_EVENTOS
GO

-- SP_CREAR_EVENTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_CREAR_EVENTO') 
	DROP PROCEDURE SP_CREAR_EVENTO  
GO
CREATE PROC	SP_CREAR_EVENTO
	@cliente_id INTEGER,
	@vendedor_id INTEGER,
	@tipo VARCHAR(20),
	@descripcion TEXT,
	@fecha_inicio DATETIME,
	@duracion INTEGER
AS
BEGIN
	BEGIN TRAN SP_CREAR_EVENTO
	BEGIN TRY
		INSERT INTO evento(cliente_id, vendedor_id, tipo, descripcion, fecha_inicio, duracion)
		VALUES(@cliente_id, @vendedor_id, @tipo, @descripcion, @fecha_inicio, @duracion)
		COMMIT TRAN SP_CREAR_EVENTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_CREAR_EVENTO
	END CATCH
END
GO

-- SP_ACTUALIZAR_EVENTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTUALIZAR_EVENTO') 
	DROP PROCEDURE SP_ACTUALIZAR_EVENTO  
GO
CREATE PROC	SP_ACTUALIZAR_EVENTO
	@evento_id INTEGER,
	@cliente_id INTEGER,
	@vendedor_id INTEGER,
	@tipo VARCHAR(20),
	@descripcion TEXT,
	@fecha_inicio DATETIME,
	@duracion INTEGER
AS
BEGIN
	BEGIN TRAN SP_ACTUALIZAR_EVENTO
	BEGIN TRY
		UPDATE evento SET
			cliente_id=@cliente_id,
			vendedor_id=@vendedor_id,
			tipo=@tipo,
			descripcion=@descripcion,
			fecha_inicio=@fecha_inicio,
			duracion=@duracion
		WHERE evento_id=@evento_id
		COMMIT TRAN SP_ACTUALIZAR_EVENTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTUALIZAR_EVENTO
	END CATCH
END
GO

-- SP_ACTIVAR_DESACTIVAR_EVENTO
IF EXISTS(SELECT * FROM sys.procedures WHERE NAME='SP_ACTIVAR_DESACTIVAR_EVENTO') 
	DROP PROCEDURE SP_ACTIVAR_DESACTIVAR_EVENTO  
GO
CREATE PROC	SP_ACTIVAR_DESACTIVAR_EVENTO
	@evento_id INTEGER,
	@es_visible BIT
AS
BEGIN
	BEGIN TRAN SP_ACTIVAR_DESACTIVAR_EVENTO
	BEGIN TRY
		UPDATE evento SET es_visible=@es_visible WHERE evento_id=@evento_id
		COMMIT TRAN SP_ACTIVAR_DESACTIVAR_EVENTO
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SP_ACTIVAR_DESACTIVAR_EVENTO
	END CATCH
END
GO

-- SP_OBTENER_SIGUIENTE_EVENTO_ID
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'SP_OBTENER_SIGUIENTE_EVENTO_ID')
    DROP PROCEDURE SP_OBTENER_SIGUIENTE_EVENTO_ID;
GO

CREATE PROCEDURE SP_OBTENER_SIGUIENTE_EVENTO_ID
AS
BEGIN
    DECLARE @siguiente_id INT;

    SELECT @siguiente_id = ISNULL(MAX(evento_id), 0) + 1
    FROM evento;

    SELECT @siguiente_id AS siguiente_evento_id;
END;
GO

EXEC SP_OBTENER_SIGUIENTE_EVENTO_ID
GO

-- FIN PROCEDIMIENTOS ALMACENADOS PARA TABLA EVENTO

